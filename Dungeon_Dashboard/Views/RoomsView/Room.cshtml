@using Dungeon_Dashboard.Group
@model RoomModel
@{
    ViewBag.Title = "Room - " + Model.Name;
}
<link rel="stylesheet" href="~/css/RoomId.css" />
<script src="https://cdn.jsdelivr.net/npm/diff-match-patch@1.0.5/index.min.js"></script>
<script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>

<div class="container-fluid">
    <div class="row">
        <main class="col-12 col-md-9 order-1">
            <h1>@Model.Name</h1>
            <p class="text-muted">@Model.Description</p>
            <p class="text-muted">Created by: <strong>@Model.CreatedBy</strong></p>

            <div class="card mt-4">
                <div class="card-header"><h5>Notatki</h5></div>
                <div class="card-body">
                    <div id="notesContainer"></div>
                    <textarea id="newNoteContent" class="form-control" placeholder="Nowa notatka..."></textarea>
                    <button id="addNoteBtn" class="btn btn-primary mt-2">Dodaj notatkę</button>
                </div>
            </div>
        </main>

        <aside class="col-12 col-md-3 order-2 ms-auto">
            <div class="card sticky-top" style="top:20px;">
                <div class="card-header"><h5>Participants</h5></div>
                <div class="card-body p-0">
                    <ul id="participantsList" class="list-group list-group-flush"></ul>
                </div>
            </div>
        </aside>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/diff-match-patch@1.0.5/index.min.js"></script>

<script>
    const roomId = @Model.Id;
    const userName = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(User.Identity.Name));
    const allUsers = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Participants));

    document.addEventListener("DOMContentLoaded", () => {
        const listEl = document.getElementById("participantsList");

        function renderList(onlineUsers) {
            listEl.innerHTML = "";
            const onlineSet = new Set(onlineUsers.map(u => u.toLowerCase()));

            allUsers.forEach(u => {
                const li = document.createElement("li");
                li.className = "list-group-item";

                const dot = document.createElement("span");
                dot.className = "status-dot " + (onlineSet.has(u.toLowerCase()) ? "online" : "offline");

                const details = document.createElement("div");
                details.className = "user-details";

                const nameDiv = document.createElement("div");
                nameDiv.className = "user-name";
                nameDiv.textContent = u;

                const statusDiv = document.createElement("div");
                const isOnline = onlineSet.has(u.toLowerCase());
                statusDiv.className = "user-status " + (isOnline ? "online" : "offline");
                statusDiv.textContent = isOnline ? "Online" : "Offline";

                details.appendChild(nameDiv);
                details.appendChild(statusDiv);
                li.appendChild(dot);
                li.appendChild(details);
                listEl.appendChild(li);
            });
        }

        renderList([]);

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/participantsHub")
            .configureLogging(signalR.LogLevel.Warning)
            .withAutomaticReconnect()
            .build();

        connection.on("UpdateParticipants", onlineUsers => {
            renderList(onlineUsers);
        });

        connection.start()
            .then(() => connection.invoke("JoinRoom", roomId, userName))
            .catch(err => console.error("SignalR error:", err));

        const pConn = new signalR.HubConnectionBuilder()
            .withUrl("/participantsHub")
            .withAutomaticReconnect()
            .build();
        pConn.on("UpdateParticipants", online => {
            const list = document.getElementById("participantsList");
            list.innerHTML = "";
            const set = new Set(online.map(u => u.toLowerCase()));
            allUsers.forEach(u => {
                const li = document.createElement("li");
                li.className = "list-group-item";
                const dot = document.createElement("span");
                dot.className = "status-dot " + (set.has(u.toLowerCase()) ? "online" : "offline");
                const details = document.createElement("div");
                details.className = "user-details";
                details.innerHTML = `<div class="user-name">${u}</div>
                                     <div class="user-status ${set.has(u.toLowerCase()) ? "online" : "offline"}">
                                       ${set.has(u.toLowerCase()) ? "Online" : "Offline"}
                                     </div>`;
                li.append(dot, details);
                list.append(li);
            });
        });
        pConn.start().then(() => pConn.invoke("JoinRoom", roomId, userName));

        const dmp = new diff_match_patch();
        const noteStates = {};
        const nConn = new signalR.HubConnectionBuilder()
            .withUrl("/notesHub")
            .withAutomaticReconnect()
            .build();

        nConn.on("ReceiveNotes", notes => {
            const c = document.getElementById("notesContainer");
            c.innerHTML = "";
            notes.forEach(n => {
                noteStates[n.id] = n.content;
                renderNote(n.id, n.content);
            });
        });

        nConn.on("ReceiveNotePatch", (id, patchText) => {
            const el = document.querySelector(`span.note-text[data-note-id='${id}']`);
            if (!el) return;
            const patches = dmp.patch_fromText(patchText);
            const [newText] = dmp.patch_apply(patches, el.textContent);
            noteStates[id] = newText;
            el.textContent = newText;
        });

        nConn.start().then(() => nConn.invoke("FetchNotes", roomId));

        document.getElementById("addNoteBtn").addEventListener("click", () => {
            const txt = document.getElementById("newNoteContent");
            const content = txt.value.trim();
            if (!content) return;
            nConn.invoke("AddNote", roomId, content, userName)
                .then(() => txt.value = "")
                .catch(console.error);
        });

        function renderNote(id, content) {
            const c = document.getElementById("notesContainer");

            const container = document.createElement("div");
            container.className = "note-item position-relative border p-2 mb-2";
            container.setAttribute("data-note-id", id);

            const textSpan = document.createElement("span");
            textSpan.className = "note-text";
            textSpan.setAttribute("data-note-id", id);
            textSpan.setAttribute("contentEditable", "true");
            textSpan.textContent = content;

            const btn = document.createElement("button");
            btn.type = "button";
            btn.className = "position-absolute top-0 end-0 m-1 border-0 bg-transparent text-light";
            btn.innerHTML = "&times;";
            btn.style.cursor = "pointer";
            btn.setAttribute("aria-label", "Usuń");
            btn.setAttribute("contentEditable", "false");
            btn.addEventListener("click", e => {
                e.stopPropagation();
                nConn.invoke("DeleteNote", roomId, id).catch(console.error);
            });

            textSpan.addEventListener("input", debounce(() => {
                const old = noteStates[id];
                const curr = textSpan.textContent;
                const patches = dmp.patch_make(old, curr);
                const patchText = dmp.patch_toText(patches);
                noteStates[id] = curr;
                nConn.invoke("EditNotePatch", roomId, id, patchText)
                    .catch(console.error);
            }, 300));

            container.appendChild(textSpan);
            container.appendChild(btn);
            c.appendChild(container);
        }

        function debounce(fn, delay) {
            let t;
            return (...args) => {
                clearTimeout(t);
                t = setTimeout(() => fn(...args), delay);
            };
        }

        nConn.on("NoteDeleted", id => {
            const item = document.querySelector(`.note-item[data-note-id='${id}']`);
            if (item) item.remove();
        });

        
    });
</script>
